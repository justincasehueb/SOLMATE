knitr::opts_chunk$set(echo = TRUE)
?choose
dbinom(0:10,10,0.5)
?dbinom
rbinom(1,10,0.5)
rbinom(1,10,0.5)
rbinom(1,10,0.5)
rbinom(1,10,0.5)
rbinom(1,10,0.5)
rbinom(1,10,0.5)
rbinom(1,10,0.5)
rbinom(1,10,0.5)
rbinom(1,10,0.5)
rbinom(1,10,0.5)
rbinom(1,10,0.5)
rbinom(1,10,0.5)
rbinom(1,10,0.5)
rbinom(1,10,0.5)
rbinom(1,10,0.5)
rbinom(1,10,0.5)
rbinom(1,10,0.5)
rbinom(1,10,0.5)
rbinom(1,10,0.5)
rbinom(1,10,0.5)
rbinom(1,10,0.5)
rbinom(1,10,0.5)
knitr::opts_chunk$set(echo = TRUE)
mm=function(x){
return(mean(x)/median(x))
}
set.seed(39)
sam=rnorm(25,mean=25,sd=10)
a=myboot(x=sam,fun=mm)
myboot<-function(iter=10000,x,fun="mean",alpha=0.05,...){
#Notice where the ... is repeated in the code
n=length(x)   #sample size
#Now sample with replacement
y=sample(x,n*iter,replace=TRUE) #A
# Make a matrix with all the resampled values
rs.mat=matrix(y,nr=n,nc=iter,byrow=TRUE)
xstat=apply(rs.mat,2,fun)
# xstat is a vector and will have iter values in it
ci=quantile(xstat,c(alpha/2,1-alpha/2)) #B
# Nice way to form a confidence interval
# A histogram follows
# The object para will contain the parameters used to make the histogram
para=hist(xstat,freq=FALSE,las=1,main="Histogram of Bootstrap sample statistics",...)
#mat will be a matrix that contains the data, this is done so that I can use apply()
mat=matrix(x,nr=length(x),nc=1,byrow=TRUE)
#pte is the point estimate
#This uses whatever fun is
pte=apply(mat,2,fun)
abline(v=pte,lwd=3,col="Black")# Vertical line
segments(ci[1],0,ci[2],0,lwd=4)      #Make the segment for the ci
text(ci[1],0,paste("(",round(ci[1],2),sep=""),col="Red",cex=3)
text(ci[2],0,paste(round(ci[2],2),")",sep=""),col="Red",cex=3)
# plot the point estimate 1/2 way up the density
text(pte,max(para$density)/2,round(pte,2),cex=3)
return(list(ci=ci,fun=fun,x=x,xstat=xstat))# Some output to use if necessary
}
mm=function(x){
return(mean(x)/median(x))
}
set.seed(39)
sam=rnorm(25,mean=25,sd=10)
a=myboot(x=sam,fun=mm)
sam=c(1,1,1,2,2,2,2,3,3,3,4,4)
a=myboot(x=sam,fun="median")
barplot(a$xstat)
a$ci
sam=c(1,1,1,2,2,2,2,3,3,3,4,4)
a=myboot(10,x=sam,fun="median")
barplot(a$xstat)
a$ci
sam=c(1,1,1,2,2,2,2,3,3,3,4,4)
a=myboot(x=sam,fun="median")
barplot(a$xstat)
a$ci
sam=c(1,1,1,2,2,2,2,3,3,3,4,4)
a=myboot(x=sam,fun="median")
barplot(a$xstat)
a$ci
?outer
matrix1=mat([1,2,3,4,5,6,7,8,9],byrow=TRUE)
matrix1=mat(c(1,2,3,4,5,6,7,8,9),byrow=TRUE)
matrix1=matrix(c(1,2,3,4,5,6,7,8,9),byrow=TRUE)
View(matrix1)
View(matrix1)
matrix1=matrix(c(1,2,3,4,5,6,7,8,9),3,3,byrow=TRUE)
matrix2=matrix(c(9,8,7,6,5,4,3,2,1),3,3,byrow=TRUE)
View(matrix2)
View(matrix2)
matrix3=outer(matrix1,matrix2,'*')
matrix3
View(matrix2)
View(matrix3)
y=matrix(c(2,4,6,8,10,12,14,16,18),3,3,byrow=TRUE)
view(y)
View(y)
i=max(which(y==max(y))) #B
View(i)
i(9)
i[9]
y[9]
y=matrix(c(18,1,1,1,1,1,1,1,1),3,3,byrow=TRUE)
View(y)
i=max(which(y==max(y))) #B
i
?~
?!
3!
factorial(3)
outer(1:4,5:10,function(x,y) paste(x,y,sep=" "))
seq(1,10,1)
seq(1,10,2)
knitr::opts_chunk$set(echo = TRUE)
ML<-function(p,x){
x=sum(x)
temp=factorial(x)/(factorial(x)*factorial(n-x))
return(temp*((p^x)*(1-p)^(n-x)))
}
mymaxlik(ML,x=c(3,3,4,3,4,5,5,4),param=seq(0,100,1))
mymaxlik=function(lfun,x,param,...){
# how many param values are there?
np=length(param)
# outer -- notice the order, x then param
# this produces a matrix -- try outer(1:4,5:10,function(x,y) paste(x,y,sep=" "))   to understand
z=outer(x,param,lfun) #A
# z is a matrix where each x,param is replaced with the function evaluated at those values
y=apply(z,2,sum)
# y is a vector made up of the column sums
# Each y is the log lik for a new parameter value
plot(param,y,col="Blue",type="l",lwd=2,...)
# which gives the index for the value of y == max.
# there could be a max between two values of the parameter, therefore 2 indices
# the first max will take the larger indice
i=max(which(y==max(y))) #B
abline(v=param[i],lwd=2,col="Red")
# plots a nice point where the max lik is
points(param[i],y[i],pch=19,cex=1.5,col="Black")
axis(3,param[i],round(param[i],2))
#check slopes. If it is a max the slope shoud change sign from + to
# We should get three + and two -vs
ifelse(i-3>=1 & i+2<=np, slope<-(y[(i-2):(i+2)]-y[(i-3):(i+1)])/(param[(i-2):(i+2)]-param[(i-3):(i+1)]),slope<-"NA")
return(list(i=i,parami=param[i],yi=y[i],slope=slope))
}
ML<-function(p,x){
x=sum(x)
temp=factorial(x)/(factorial(x)*factorial(n-x))
return(temp*((p^x)*(1-p)^(n-x)))
}
mymaxlik(ML,x=c(3,3,4,3,4,5,5,4),param=seq(0,100,1))
ML<-function(p,x){
n=20
x=sum(x)
temp=factorial(x)/(factorial(x)*factorial(n-x))
return(temp*((p^x)*(1-p)^(n-x)))
}
mymaxlik(ML,x=c(3,3,4,3,4,5,5,4),param=seq(0,100,1))
ML<-function(p,x){
n=20
x=sum(x)
temp=factorial(x)/(factorial(x)*factorial(n-x))
return(temp*((p^x)*(1-p)^(n-x)))
}
mymaxlik(ML,x=c(3,3,4,3,4,5,5,4),param=seq(1,100,1))
ML<-function(p,x){
n=20
x=sum(x)
temp=factorial(x)/(factorial(x)*factorial(n-x))
return(temp*((p^x)*(1-p)^(n-x)))
}
mymaxlik(ML,x=c(3,3,4,3,4,5,5,4),param=seq(1,1,100))
ML<-function(p,x){
n=20
x=sum(x)
temp=factorial(x)/(factorial(x)*factorial(n-x))
return(temp*((p^x)*(1-p)^(n-x)))
}
mymaxlik(logbin,x=c(3,3,4,3,4,5,5,4),param=seq(1,1,100))
ML<-function(p,x){
n=20
x=sum(x)
temp=factorial(x)/(factorial(x)*factorial(n-x))
return(temp*((p^x)*(1-p)^(n-x)))
}
mymaxlik(logbin(),x=c(3,3,4,3,4,5,5,4),param=seq(1,1,100))
ML<-function(p,x){
n=20
x=sum(x)
temp=factorial(x)/(factorial(x)*factorial(n-x))
return(temp*((p^x)*(1-p)^(n-x)))
}
mymaxlik(x=c(3,3,4,3,4,5,5,4),param=seq(1,1,100),lfun=logbin,xlab=expression(pi),main="Binomial",cex.main=2)
ML<-function(p,x){
n=20
x=sum(x)
temp=factorial(x)/(factorial(x)*factorial(n-x))
return(temp*((p^x)*(1-p)^(n-x)))
}
logbin=function(x,param) log(dbinom(x,prob=param,size=10))
mymaxlik(x=c(3,3,4,3,4,5,5,4),param=seq(1,1,100),lfun=logbin,xlab=expression(pi),main="Binomial",cex.main=2)
ML<-function(p,x){
n=20
x=sum(x)
temp=factorial(x)/(factorial(x)*factorial(n-x))
return(temp*((p^x)*(1-p)^(n-x)))
}
logbin=function(x,param) log(dbinom(x,prob=param,size=10))
mymaxlik(x=c(3,3,4,3,4,5,5,4),param=seq(0,1,1000),lfun=logbin,xlab=expression(pi),main="Binomial",cex.main=2)
ML<-function(p,x){
n=20
x=sum(x)
temp=factorial(x)/(factorial(x)*factorial(n-x))
return(temp*((p^x)*(1-p)^(n-x)))
}
logbin=function(x,param) log(dbinom(x,prob=param,size=10))
mymaxlik(x=c(3,3,4,3,4,5,5,4),param=seq(0,1,1000),lfun=logbin)#,xlab=expression(pi),main="Binomial",cex.main=2)
logbin=function(x,param) log(dbinom(x,prob=param,size=10))
logpoiss=function(x,param) log(dpois(x,lambda=param))
logexp=function(x,param) log(dexp(x,rate=param))
#max likelihood function
## For repeated sampling from same distribution
mymaxlik=function(lfun,x,param,...){
# how many param values are there?
np=length(param)
# outer -- notice the order, x then param
# this produces a matrix -- try outer(1:4,5:10,function(x,y) paste(x,y,sep=" "))   to understand
z=outer(x,param,lfun)
# z is a matrix where each x,param is replaced with the function evaluated at those values
y=apply(z,2,sum)
# y is a vector made up of the column sums
# Each y is the log lik for a new parameter value
plot(param,y,col="Blue",type="l",lwd=2,...)
# which gives the index for the value of y == max.
# there could be a max between two values of the parameter, therefore 2 indices
# the first max will take the larger indice
i=max(which(y==max(y)))
abline(v=param[i],lwd=2,col="Red")
# plots a nice point where the max lik is
points(param[i],y[i],pch=19,cex=1.5,col="Black")
axis(3,param[i],round(param[i],2))
#check slopes. If it is a max the slope shoud change sign from + to
# We should get three + and two -vs
ifelse(i-3>=1 & i+2<=np, slope<-(y[(i-2):(i+2)]-y[(i-3):(i+1)])/(param[(i-2):(i+2)]-param[(i-3):(i+1)]),slope<-"NA")
return(list(i=i,parami=param[i],yi=y[i],slope=slope))
}
mymaxlik(x=c(9,9,1,9,9,9),param=seq(0,1,length=1000),lfun=logbin,xlab=expression(pi),main="Binomial",cex.main=2)
ML<-function(p,x){
n=20
x=sum(x)
temp=factorial(x)/(factorial(x)*factorial(n-x))
return(temp*((p^x)*(1-p)^(n-x)))
}
logbin=function(x,param) log(dbinom(x,prob=param,size=10))
mymaxlik(x=c(3,3,4,3,4,5,5,4),param=seq(0,1,length=1000),lfun=logbin)#,xlab=expression(pi),main="Binomial",cex.main=2)
ML<-function(p,x){
n=20
x=sum(x)
temp=factorial(x)/(factorial(x)*factorial(n-x))
return(temp*((p^x)*(1-p)^(n-x)))
}
logbin=function(x,param) log(dbinom(x,prob=param,size=10))
mymaxlik(x=c(3,3,4,3,4,5,5,4),param=seq(0,1,length=1000),lfun=logbin,xlab=expression(pi),main="Binomial",cex.main=2)
ML<-function(p,x){
n=20
x=sum(x)
temp=factorial(x)/(factorial(x)*factorial(n-x))
return(temp*((p^x)*(1-p)^(n-x)))
}
logbin=function(x,param) log(dbinom(x,prob=param,size=10))
mymaxlik(x=c(3,3,4,3,4,5,5,4),param=seq(0,1,length=1000),lfun=logbin,xlab=expression(pi),main="Binomial")
logpoiss=function(x,param) log(dpois(x,lambda=param))
mymaxlik(x=c(4,6,7,6,5),param=seq(0,20,length=1000),lfun=logpoiss,xlab=expression(lambda),main="Poisson",cex.main=2)
logbin=function(x,param) log(dbinom(x,prob=param,size=10))
mymaxlik(x=c(3,3,4,3,4,5,5,4),param=seq(0,1,length=1000),lfun=logbin,xlab=expression(pi),main="Binomial");
logbin=function(x,param) log(dbinom(x,prob=param,size=10))
a=mymaxlik(x=c(3,3,4,3,4,5,5,4),param=seq(0,1,length=1000),lfun=logbin,xlab=expression(pi),main="Binomial")
logpoiss=function(x,param) log(dpois(x,lambda=param))
a=mymaxlik(x=c(4,6,7,6,5),param=seq(0,20,length=1000),lfun=logpoiss,xlab=expression(lambda),main="Poisson",cex.main=2)
mymaxlikg=function(lfun="logbin2",theta) { # default log lik is a combination bin
nth=length(theta)  # nu. of valuse used in theta
thmat=matrix(theta,nr=nth,nc=1,byrow=TRUE) # Matrix of theta
z=apply(thmat,1,lfun) # z holds the log lik values
zmax=max(which(z==max(z)))  # finding the INDEX of the max lik
plot(theta,exp(z),type="l") # plot of lik
abline(v=theta[zmax],col="Blue")   #  verical line through max
axis(3,theta[zmax],round(theta[zmax],4))  # one tick on the third axis
theta[zmax]   # theta corresponding to max lik
}
logbin2=function(theta){log(dbinom(2,prob=theta,size=6)) + log(dbinom(4,prob=theta,size=10))}
mymaxlikg(logbin2,seq(0,1,1000))
mymaxlikg=function(lfun="logbin2",theta) { # default log lik is a combination bin
nth=length(theta)  # nu. of valuse used in theta
thmat=matrix(theta,nr=nth,nc=1,byrow=TRUE) # Matrix of theta
z=apply(thmat,1,lfun) # z holds the log lik values
zmax=max(which(z==max(z)))  # finding the INDEX of the max lik
plot(theta,exp(z),type="l") # plot of lik
abline(v=theta[zmax],col="Blue")   #  verical line through max
axis(3,theta[zmax],round(theta[zmax],4))  # one tick on the third axis
theta[zmax]   # theta corresponding to max lik
}
logbin2=function(theta){log(dbinom(2,prob=theta,size=6)) + log(dbinom(4,prob=theta,size=10))}
a=mymaxlikg(logbin2,seq(0,1,1000))
logbin2=function(theta){log(dbinom(2,prob=theta,size=6)) + log(dbinom(4,prob=theta,size=10))}
mymaxlikg=function(lfun="logbin2",theta) { # default log lik is a combination bin
nth=length(theta)  # nu. of valuse used in theta
thmat=matrix(theta,nr=nth,nc=1,byrow=TRUE) # Matrix of theta
z=apply(thmat,1,lfun) # z holds the log lik values
zmax=max(which(z==max(z)))  # finding the INDEX of the max lik
plot(theta,exp(z),type="l") # plot of lik
abline(v=theta[zmax],col="Blue")   #  verical line through max
axis(3,theta[zmax],round(theta[zmax],4))  # one tick on the third axis
theta[zmax]   # theta corresponding to max lik
}
a=mymaxlikg(seq(0,1,1000))
logbin2=function(theta){log(dbinom(2,prob=theta,size=6)) + log(dbinom(4,prob=theta,size=10))}
mymaxlikg=function(lfun="logbin2",theta) { # default log lik is a combination bin
nth=length(theta)  # nu. of valuse used in theta
thmat=matrix(theta,nr=nth,nc=1,byrow=TRUE) # Matrix of theta
z=apply(thmat,1,lfun) # z holds the log lik values
zmax=max(which(z==max(z)))  # finding the INDEX of the max lik
plot(theta,exp(z),type="l") # plot of lik
abline(v=theta[zmax],col="Blue")   #  verical line through max
axis(3,theta[zmax],round(theta[zmax],4))  # one tick on the third axis
theta[zmax]   # theta corresponding to max lik
}
a=mymaxlikg(theta=seq(0,1,1000))
a=mymaxlikg(theta=seq(0,1,10000))
a=mymaxlikg(theta=seq(0,1,length=10000))
mymlnorm=function(x,mu,sig,...){  #x sample vector
nmu=length(mu) # number of values in mu
nsig=length(sig)
n=length(x) # sample size
zz=c()    ## initialize a new vector
lfun=function(x,m,p) log(dnorm(x,mean=m,sd=p))   # log lik for normal
for(j in 1:nsig){
z=outer(x,mu,lfun,p=sig[j]) # z a matrix
# col 1 of z contains lfun evaluated at each x with first value of mu,
# col2 each x with 2nd value of m
# all with sig=sig[j]
y=apply(z,2,sum)
# y is a vector filled with log lik values,
# each with a difft mu and all with the same sig[j]
zz=cbind(zz,y)
## zz is the matrix with each column containing log L values, rows difft mu, cols difft sigmas
}
mymlnorm=function(x,mu,sig,...){  #x sample vector
nmu=length(mu) # number of values in mu
nsig=length(sig)
n=length(x) # sample size
zz=c()    ## initialize a new vector
lfun=function(x,m,p) log(dnorm(x,mean=m,sd=p))   # log lik for normal
for(j in 1:nsig){
z=outer(x,mu,lfun,p=sig[j]) # z a matrix
# col 1 of z contains lfun evaluated at each x with first value of mu,
# col2 each x with 2nd value of m
# all with sig=sig[j]
y=apply(z,2,sum)
# y is a vector filled with log lik values,
# each with a difft mu and all with the same sig[j]
zz=cbind(zz,y)
## zz is the matrix with each column containing log L values, rows difft mu, cols difft sigmas
}
maxl=max(exp(zz))
coord=which(exp(zz)==maxl,arr.ind=TRUE)
maxlsig=apply(zz,1,max)
contour(mu,sig,exp(zz),las=3,xlab=expression(mu),ylab=expression(sigma),axes=TRUE,
main=expression(paste("L(",mu,",",sigma,")",sep="")),...)
mlx=round(mean(x),2)  # theoretical
mly=round(sqrt((n-1)/n)*sd(x),2)
#axis(1,at=c(0:20,mlx),labels=sort(c(0:20,mlx)))
#axis(2,at=c(0:20,mly),labels=TRUE)
abline(v=mean(x),lwd=2,col="Green")
abline(h=sqrt((n-1)/n)*sd(x),lwd=2,col="Red")
# Now find the estimates from the co-ords
muest=mu[coord[1]]
sigest=sig[coord[2]]
abline(v=muest, h=sigest)
return(list(x=x,coord=coord,maxl=maxl))
}
mymlnorm(x=c(5,7,7,8,10),mu=seq(5,10,length=1000),sig=seq(0.1,4,length=1000),lwd=2,labcex=1)
mymlnorm=function(x,mu,sig,...){  #x sample vector
nmu=length(mu) # number of values in mu
nsig=length(sig)
n=length(x) # sample size
zz=c()    ## initialize a new vector
lfun=function(x,m,p) log(dnorm(x,mean=m,sd=p))   # log lik for normal
for(j in 1:nsig){
z=outer(x,mu,lfun,p=sig[j]) # z a matrix
# col 1 of z contains lfun evaluated at each x with first value of mu,
# col2 each x with 2nd value of m
# all with sig=sig[j]
y=apply(z,2,sum)
# y is a vector filled with log lik values,
# each with a difft mu and all with the same sig[j]
zz=cbind(zz,y)
## zz is the matrix with each column containing log L values, rows difft mu, cols difft sigmas
}
maxl=max(exp(zz))
coord=which(exp(zz)==maxl,arr.ind=TRUE)
maxlsig=apply(zz,1,max)
contour(mu,sig,exp(zz),las=3,xlab=expression(mu),ylab=expression(sigma),axes=TRUE,
main=expression(paste("L(",mu,",",sigma,")",sep="")),...)
mlx=round(mean(x),2)  # theoretical
mly=round(sqrt((n-1)/n)*sd(x),2)
#axis(1,at=c(0:20,mlx),labels=sort(c(0:20,mlx)))
#axis(2,at=c(0:20,mly),labels=TRUE)
abline(v=mean(x),lwd=2,col="Green")
abline(h=sqrt((n-1)/n)*sd(x),lwd=2,col="Red")
# Now find the estimates from the co-ords
muest=mu[coord[1]]
sigest=sig[coord[2]]
abline(v=muest, h=sigest)
return(list(x=x,coord=coord,maxl=maxl))
}
mymlnorm(x=c(10,12,13,15,12,11,10),mu=seq(5,10,length=1000),sig=seq(0.1,4,length=1000),lwd=2,labcex=1)
mymlnorm=function(x,mu,sig,...){  #x sample vector
nmu=length(mu) # number of values in mu
nsig=length(sig)
n=length(x) # sample size
zz=c()    ## initialize a new vector
lfun=function(x,m,p) log(dnorm(x,mean=m,sd=p))   # log lik for normal
for(j in 1:nsig){
z=outer(x,mu,lfun,p=sig[j]) # z a matrix
# col 1 of z contains lfun evaluated at each x with first value of mu,
# col2 each x with 2nd value of m
# all with sig=sig[j]
y=apply(z,2,sum)
# y is a vector filled with log lik values,
# each with a difft mu and all with the same sig[j]
zz=cbind(zz,y)
## zz is the matrix with each column containing log L values, rows difft mu, cols difft sigmas
}
maxl=max(exp(zz))
coord=which(exp(zz)==maxl,arr.ind=TRUE)
maxlsig=apply(zz,1,max)
contour(mu,sig,exp(zz),las=3,xlab=expression(mu),ylab=expression(sigma),axes=TRUE,
main=expression(paste("L(",mu,",",sigma,")",sep="")),...)
mlx=round(mean(x),2)  # theoretical
mly=round(sqrt((n-1)/n)*sd(x),2)
#axis(1,at=c(0:20,mlx),labels=sort(c(0:20,mlx)))
#axis(2,at=c(0:20,mly),labels=TRUE)
abline(v=mean(x),lwd=2,col="Green")
abline(h=sqrt((n-1)/n)*sd(x),lwd=2,col="Red")
# Now find the estimates from the co-ords
muest=mu[coord[1]]
sigest=sig[coord[2]]
abline(v=muest, h=sigest)
return(list(x=x,coord=coord,maxl=maxl))
}
mymlnorm(x=c(10,12,13,15,12,11,10),mu=seq(8,15,length=1000),sig=seq(1,5,length=1000),lwd=2,labcex=1)
mymlnorm(x=c(10,12,13,15,12,11,10),mu=seq(10,13.5,length=1000),sig=seq(1,3.5,length=1000),lwd=2,labcex=1)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
install.packages("reticulate")
Y
y
```{python}
1+2
```
{python} 1+2
python
knitr::opts_chunk$set(echo = TRUE)
Y
python
`python`
python3
reticulate::conda_install()
reticulate::py_install()
Y
reticulate::py_install(pip)
setwd("C:/Users/hueby/Desktop/SOLMATE/SOLMATE")
input=read.csv("solarData/inputData.csv")
target=read.csv("solarData/exampleData.csv")
input=read.csv("solarData/inputData.csv", header = T)
View(input)
input[1]
input[1:2]
input[-1]
input[-1:2]
input[-1:-2]
View(input)
View(target)
input[c(-31:-17)]
input[c(-31:-25)]
input[c(-26:-17)]
output=input[c(-26:-17)]
View(output)
output=input[c(-26:-17)]
output=output[c(-18:-21)]
View(output)
output=input[c(-26:-17)]
output=output[c(-18:-21)]
output=output[c(-25:-26)]
View(output)
input=read.csv("solarData/inputData.csv", header = T)
target=read.csv("solarData/exampleData.csv")
output=input[c(-26:-17)]
output=output[c(-18:-21)]
output=output[c(-25:-26)]
library(reticulate)
input=read.csv("solarData/inputData.csv", header = T)
target=read.csv("solarData/exampleData.csv")
output=input[c(-26:-17)]
output=output[c(-18:-21)]
output=output[c(-25:-26)]
version
library(installr)
install.packages(installr)
install.packages('installr')
installr::updateR()
